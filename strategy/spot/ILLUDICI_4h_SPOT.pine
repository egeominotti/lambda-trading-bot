//@version=4
//Â© Doyouknow
strategy(title="ILLUDICI_4h_SPOT", shorttitle="ILLUDICI_4h_SPOT", overlay=true, calc_on_every_tick=true)
 
// BACKTEST PERIOD INPUT ============================================================================================
fromDate            =       input(defval = timestamp("01 Jan 2012 00:00 UTC"), title = "From Date", type = input.time, minval = timestamp("01 Jan 1970 00:00 UTC"), group = "Backtest Period") // backtest start date
toDate              =       input(defval = timestamp("31 Dec 2121 23:59 UTC"), title = "To Date",   type = input.time, minval = timestamp("01 Jan 1970 00:00 UTC"), group = "Backtest Period") // backtest finish date
 
isWithinBacktestPeriod() =>
    time >= fromDate and time <= toDate ? true : false // create function "within window of time"
 
ema1len             =       input(title="EMA1", type = input.integer, defval = 7)
emaexitlen          =       input(title="EMAEXIT", type = input.integer, defval = 9)
ema2len             =       input(title="EMA2", type = input.integer, defval = 12)
ema3len             =       input(title="EMA3", type = input.integer, defval = 200)
 
lowLen              =       input(title="Low Length", type=input.integer, group="Low Definitions", defval=1, step=10)
lowOffset           =       input(title="Low offset", type=input.integer, group="Low Definitions", defval=0, step=1)
lowSource           =       input(title="Low source", type=input.source, group="Low Definitions", defval=low)
 
hiLen               =       input(title="High Length", type=input.integer,group="High Definitions", defval=1, step=10)
hiOffset            =       input(title="High offset", type=input.integer,group="High Definitions", defval=0, step=1)
highSource          =       input(title="High source", type=input.source, group="High Definitions", defval=high)
 
takeprofitdev                       =       input(defval = 0.83, title = 'Take Profit Dev %', type = input.float, minval = 0.1, step = 0.1, tooltip = "The percentage of the price to decrese stop loss price target.", group = "Strategy") / 100
longStopLossPerc                    =       input(defval = 4.25, title = 'Stop Loss %', type = input.float, minval = 0.1, step = 0.1, tooltip = "The percentage of the price to decrese stop loss price target.", group = "Strategy") / 100
enableTrailingSL                    =       input(defval = true, title = "Enable Trailing", type = input.bool, tooltip = "Enable or disable the trailing for take profit.", group = "Strategy")
trailingStopLossDeviationPerc       =       input(defval = 4.5, title = "Stop Loss Deviation %", type = input.float, minval = 0.05, maxval = 100, step = 0.05, tooltip = "The step to follow the price when the take profit limit is reached.", group = "Strategy") / 100
 
//stoplossPer                         =       input(4.5, title='Stop Loss %', type=input.float) / 100
 
// Indicators
 
ema1                =       ema(close, ema1len)
emaexit             =       ema(close, emaexitlen)
ema2                =       ema(close, ema2len)
ema3                =       ema(close, ema3len)
 
hiHighs             =       highest(highSource, hiLen)
loLows              =       lowest(lowSource, lowLen)
 
// Plotting
plot(ema1, title="EMA 1", color=color.new(color.red, transp=50))
plot(emaexit, title="EMA EXIT", color=color.new(color.blue, transp=50))
plot(ema2, title="EMA 2", color=color.new(color.orange, transp=50))
plot(ema3, title="EMA 3", color=color.new(color.white, transp=50))
 
//STRATEGY
bought              =       strategy.opentrades[0] == 1 and strategy.position_size[0] > strategy.position_size[1]
entry_price         =       valuewhen(bought, open, 0)
 
if (isWithinBacktestPeriod())
    entry               =       close > ema3 and close > ema1 and ema1 > ema2
    stoploss            =       close <= (entry_price * (1 - longStopLossPerc)) //or ema1 < ema2
    takeprofit          =       close < high[hiOffset] and low < emaexit and close > entry_price * (1 + takeprofitdev) //* (1 + longStopLossPerc)//ZE * (1 + longTakeProfitPerc)
 
    bool longIsActive   =       entry or strategy.position_size > 0
 
    float longStopLossPrice = na
 
    longStopLossPrice := if (isWithinBacktestPeriod() and longIsActive)
        nz(longStopLossPrice[1], close * (1 - longStopLossPerc))
    else
        na
 
    longTrailingStopLossStepTicks = longStopLossPrice * trailingStopLossDeviationPerc / syminfo.mintick
 
    strategy.entry(id = "EL", long = strategy.long, when = entry)
 
    // submit exit orders for trailing take profit price
    strategy.close(id= "EL", comment= "TP", when = takeprofit)
    strategy.close(id="EL", comment= "SL", when= stoploss)
    //strategy.exit(id = "TP/SL",from_entry="EL", limit = enableTrailingSL ? na : longStopLossPrice, trail_price = enableTrailingSL ? longStopLossPrice : na, trail_offset = enableTrailingSL ? longTrailingStopLossStepTicks : na, when = longIsActive)